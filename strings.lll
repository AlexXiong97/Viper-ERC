;;; --------------------------------------------------------------------------------------------------------
;;; Implementation of Nick Johnson's String Utility functions in LLL
;;;
;;; George Lambeth - glambeth1594@gmail.com

(seq
	;; -----------------------------------------------------------------------------------------------------

  	;; Memory layout
  	(def '*scratch* 0x00)
	(def '*funcid* 0x20)

	;; Precomputed function IDs.
	(def 'concat 0x5f3376f3) ; concat(bytes,bytes)

	;; Shifts the leftmost 4 bytes of a 32-byte number right by 28 bytes.
 	(def 'shift-right (input)
		(div input (exp 2 224)))

	;; Gets the function ID and stores it in memory for reference.
  	(def 'get-function-id
		(mstore *funcid* (shift-right (calldataload 0x00))))

	;; Takes a function hash and a sequence of code, compares that hash to the
 	;; hash supplied by the caller (which has been stored in *funcid*), and
	;; executes the given code if they match.
	(def 'function (function-hash code-body)
    	(when (= (mload *funcid*) function-hash)
			code-body))


	;;; ------------------------------------------------------------------------------------------------------
	;;; CODE

	(returnlll
		(seq
			get-function-id


			;; -----------------------------------------------------------------------------------------------
			;; @notice concatenates the strings passed in
			;; @dev Signature: concat(bytes,bytees)
			;; @return The concatenated strings. TODO: remove the extra 0 bytes that are padded

			(function concat
			    (seq

			    	;;allocate memory for first string
			    	(def '*firstString* 0x40)

			    	;;get length of first string
			    	(def 'firstStringSize (calldataload 4))

			    	;;retrieve first string and store in memory
			    	(calldatacopy *firstString* 36 firstStringSize)

			    	;;get length of second string;
			    	(def 'secondStringSize (calldataload 36))

			    	;;allocate memory for second string
			    	(def '*secondString* (add 0x40 firstStringSize)) 

			    	;;retrieve second string and store in memory
			    	(calldatacopy *secondString* 68 secondStringSize)

			      	;; return the bytes we just stored in memory.
			        (return *firstString*)))

			    ;; --------------------------------------------------------------------------------------------
			    ;; @notice Fallback: No functions matched the function ID provided.

				(panic))))
